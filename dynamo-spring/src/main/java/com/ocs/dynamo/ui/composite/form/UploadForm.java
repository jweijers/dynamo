/*
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package com.ocs.dynamo.ui.composite.form;

import com.ocs.dynamo.constants.DynamoConstants;
import com.ocs.dynamo.ui.composite.type.ScreenMode;
import com.vaadin.data.Property;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Layout;
import org.vaadin.easyuploads.UploadField;

/**
 * A form that contains a file upload component and a progress bar
 * 
 * @author bas.rutten
 */
@SuppressWarnings("serial")
public abstract class UploadForm extends ProgressForm<byte[]> {

    /**
     * Callback object for handling a file upload
     * 
     * @author bas.rutten
     */
    @SuppressWarnings("serial")
    private class UploadReceiver implements Property.ValueChangeListener {

        private final UploadField upload;

        private UploadReceiver(UploadField upload) {
            this.upload = upload;
        }

        @Override
        public void valueChange(Property.ValueChangeEvent event) {
            UploadForm.this.fileName = upload.getLastFileName();
            if (upload.getValue() == null) {
                upload.clear();
            } else {
                startWork((byte[]) upload.getValue());
            }
        }
    }

    private String fileName;

    private ScreenMode screenMode;

    private boolean showCancelButton;

    private UploadField upload;

    private String acceptFilter;

    /**
     * Constructor
     * 
     * @param progressMode
     * @param screenMode
     * @param showCancelButton
     *            whether to include a cancel button
     */
    public UploadForm(ProgressMode progressMode, ScreenMode screenMode, boolean showCancelButton) {
        super(progressMode);
        this.screenMode = screenMode;
        this.showCancelButton = showCancelButton;
    }

    /**
     * The method that is executed after the cancel button is clicked
     */
    protected void cancel() {
        // override in subclass if needed
        upload.setValue(null);
    }

    /**
     * Constructs the screen-specific form content
     * 
     * @param layout
     */
    protected void doBuildForm(Layout layout) {
        // override in subclass
    }

    @Override
    protected void doBuildLayout(Layout main) {
        FormLayout form = new FormLayout();
        form.setMargin(true);
        if (ScreenMode.VERTICAL.equals(screenMode)) {
            form.setStyleName(DynamoConstants.CSS_CLASS_HALFSCREEN);
        }

        main.addComponent(form);

        // add custom components
        doBuildForm(form);

        // Upload Field in memory mode.
        upload = new UploadField(UploadField.StorageMode.MEMORY);
        upload.setCaption(message("ocs.uploadform.title"));
        upload.setFieldType(UploadField.FieldType.BYTE_ARRAY);
        // Configure the file selection filter.
        upload.setAcceptFilter(getAcceptFilter());
        // Use our own cancel button.
        upload.setFileDeletesAllowed(false);
        // Don't show details generated by the upload component.
        upload.setDisplayUpload(false);

        // Handle upload event.
        UploadReceiver receiver = new UploadReceiver(upload);
        upload.addValueChangeListener(receiver);

        form.addComponent(upload);

        if (showCancelButton) {
            Button cancelButton = new Button(message("ocs.cancel"));
            cancelButton.addClickListener(new Button.ClickListener() {

                @Override
                public void buttonClick(ClickEvent event) {
                    cancel();
                }
            });
            main.addComponent(cancelButton);
        }
    }

    public String getFileName() {
        return fileName;
    }

    public String getAcceptFilter() {
        return acceptFilter;
    }

    public void setAcceptFilter(String acceptFilter) {
        this.acceptFilter = acceptFilter;
    }
}
